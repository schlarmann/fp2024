import necFile

# Values from https://www.bremerfunkfreunde.de/Html/quad/quad.html
sidelengths = [
    0.2618,
    0.25545,
    0.24782,
    0.24039,
    0.23317,
    0.22617,
    0.21939,
    0.21281,
    0.20643,
    0.20023,
    0.19423,
    0.1884,
    0.18275,
    0.17727,
]
ELEMENTS = len(sidelengths)+1

distance_first = 0.18555
distance = 0.1525

def mkQuad45(elements, verticalPolarization = False):
    nf = necFile.necFile()
    nf.initManual(2450, 4, 2, 4*elements+1)
    # Create Reflector
    distancePoint = sidelengths[0]/2**0.5
    nf.addWire([-distance_first,0,distancePoint], [-distance_first,distancePoint,0], 0.015, 5)
    nf.addWire([-distance_first,distancePoint,0], [-distance_first,0,-distancePoint], 0.015, 5)
    nf.addWire([-distance_first,0,-distancePoint], [-distance_first,-distancePoint,0], 0.015, 5)
    nf.addWire([-distance_first,-distancePoint,0], [-distance_first,0,distancePoint], 0.015, 5)
    # Create Driven Element
    distancePoint = sidelengths[1]/2**0.5
    fp = 0.05
    if verticalPolarization:
        nf.addWire([0,-fp,distancePoint], [0,fp,distancePoint], 0.015, 3) # Input
        nf.addWire([0,fp,distancePoint], [0,distancePoint,0], 0.015, 5)
        nf.addWire([0,distancePoint,0], [0,0,-distancePoint], 0.015, 5)
        nf.addWire([0,0,-distancePoint], [0,-distancePoint,0], 0.015, 5)
        nf.addWire([0,-distancePoint,0], [0,-fp,distancePoint], 0.015, 5)
    else:
        nf.addWire([0,distancePoint,fp], [0,distancePoint,-fp], 0.015, 3) # Input
        nf.addWire([0,distancePoint,-fp], [0,0,-distancePoint], 0.015, 5)
        nf.addWire([0,0,-distancePoint], [0,-distancePoint,0], 0.015, 5)
        nf.addWire([0,-distancePoint,0], [0,0,distancePoint], 0.015, 5)
        nf.addWire([0,0,distancePoint], [0,distancePoint,-fp], 0.015, 5)

    for i in range(1,elements-1):
        distancePoint = sidelengths[i+1]/2**0.5
        nf.addWire([i*distance,0,distancePoint], [i*distance,distancePoint,0], 0.015, 5)
        nf.addWire([i*distance,distancePoint,0], [i*distance,0,-distancePoint], 0.015, 5)
        nf.addWire([i*distance,0,-distancePoint], [i*distance,-distancePoint,0], 0.015, 5)
        nf.addWire([i*distance,-distancePoint,0], [i*distance,0,distancePoint], 0.015, 5)
    nf.addComment("Generated by mkQuad.py")
    nf.addComment("Quad \"Yagi\" on Points")
    if verticalPolarization:
        nf.addComment("Vertical Polarization")
        nf.writeFile("indata/quad_"+str(elements)+"_Vertical.nec")
    else:
        nf.addComment("Horizontal Polarization")
        nf.writeFile("indata/quad_"+str(elements)+"_Horizontal.nec")

def mkQuad(elements, verticalPolarization = False):
    nf = necFile.necFile()
    nf.initManual(2450, 4, 2, 4*elements+1)
    # Create Reflector
    distancePoint = sidelengths[0]
    nf.addWire([-distance_first,distancePoint,distancePoint], [-distance_first,distancePoint,-distancePoint], 0.015, 5)
    nf.addWire([-distance_first,distancePoint,-distancePoint], [-distance_first,-distancePoint,-distancePoint], 0.015, 5)
    nf.addWire([-distance_first,-distancePoint,-distancePoint], [-distance_first,-distancePoint,distancePoint], 0.015, 5)
    nf.addWire([-distance_first,-distancePoint,distancePoint], [-distance_first,distancePoint,distancePoint], 0.015, 5)
    # Create Driven Element
    distancePoint = sidelengths[1]
    fp = 0.05
    if verticalPolarization:
        nf.addWire([0,distancePoint,distancePoint-fp], [0,distancePoint-fp,distancePoint], 0.015, 3) # Input
        nf.addWire([0,distancePoint,distancePoint-fp], [0,distancePoint,-distancePoint], 0.015, 5)
        nf.addWire([0,distancePoint,-distancePoint], [0,0-distancePoint,-distancePoint], 0.015, 5)
        nf.addWire([0,-distancePoint,-distancePoint], [0,-distancePoint,distancePoint], 0.015, 5)
        nf.addWire([0,-distancePoint,distancePoint], [0,distancePoint-fp,distancePoint], 0.015, 5)
    else:
        nf.addWire([0,distancePoint-fp,-distancePoint], [0,distancePoint,-(distancePoint-fp)], 0.015, 3) # Input
        nf.addWire([0,distancePoint-fp,-distancePoint], [0,-distancePoint,-distancePoint], 0.015, 5)
        nf.addWire([0,-distancePoint,-distancePoint], [0,-distancePoint,distancePoint], 0.015, 5)
        nf.addWire([0,-distancePoint,distancePoint], [0,distancePoint,distancePoint], 0.015, 5)
        nf.addWire([0,distancePoint,distancePoint], [0,distancePoint,-(distancePoint-fp)], 0.015, 5)

    for i in range(1,elements-1):
        distancePoint = sidelengths[i+1]
        nf.addWire([i*distance,distancePoint,distancePoint], [i*distance,distancePoint,-distancePoint], 0.015, 5)
        nf.addWire([i*distance,distancePoint,-distancePoint], [i*distance,-distancePoint,-distancePoint], 0.015, 5)
        nf.addWire([i*distance,-distancePoint,-distancePoint], [i*distance,-distancePoint,distancePoint], 0.015, 5)
        nf.addWire([i*distance,-distancePoint,distancePoint], [i*distance,distancePoint,distancePoint], 0.015, 5)
    nf.addComment("Generated by mkQuad.py")
    nf.addComment("Quad \"Yagi\" on 45 degree angle")
    if verticalPolarization:
        nf.addComment("Vertical Polarization")
        nf.writeFile("indata/quad_"+str(elements)+"_+45Deg.nec")
    else:
        nf.addComment("Horizontal Polarization")
        nf.writeFile("indata/quad_"+str(elements)+"_-45Deg.nec")

for i in range(2,ELEMENTS):
    # Somehow, necpp does not like the quad at 45 degrees
    mkQuad(i, False)
    mkQuad(i, True)
    mkQuad45(i, False)
    mkQuad45(i, True)