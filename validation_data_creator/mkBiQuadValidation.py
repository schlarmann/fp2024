import necFile

feedpoint = 0.01
dist = 0.25/2**0.5
dist45 = 0.25

def mkQuad(verticalPolarization = False):
    nf = necFile.necFile()
    nf.initManual(2450, 0, 2, 9)
    # Create driven element
    if verticalPolarization:
        nf.addWire([0,0,-feedpoint], [0,0,feedpoint], 0.015, 3)

        nf.addWire([0,0,feedpoint], [0,dist,dist], 0.015, 3)
        nf.addWire([0,dist,dist], [0,2*dist,0], 0.015, 3)
        nf.addWire([0,2*dist,0], [0,dist,-dist], 0.015, 3)
        nf.addWire([0,dist,-dist], [0,0,-feedpoint], 0.015, 3)

        nf.addWire([0,0,-feedpoint], [0,-dist,-dist], 0.015, 3)
        nf.addWire([0,-dist,-dist], [0,-2*dist,0], 0.015, 3)
        nf.addWire([0,-2*dist,0], [0,-dist,dist], 0.015, 3)
        nf.addWire([0,-dist,dist], [0,0,feedpoint], 0.015, 3)
    else:
        nf.addWire([0,-feedpoint,0], [0,feedpoint,0], 0.015, 3)

        nf.addWire([0,feedpoint,0], [0,dist,dist], 0.015, 3)
        nf.addWire([0,dist,dist], [0,0,2*dist], 0.015, 3)
        nf.addWire([0,0,2*dist], [0,-dist,dist], 0.015, 3)
        nf.addWire([0,-dist,dist], [0,-feedpoint,0], 0.015, 3)

        nf.addWire([0,-feedpoint,0], [0,-dist,-dist], 0.015, 3)
        nf.addWire([0,-dist,-dist], [0,0,-2*dist], 0.015, 3)
        nf.addWire([0,0,-2*dist], [0,dist,-dist], 0.015, 3)
        nf.addWire([0,dist,-dist], [0,feedpoint,0], 0.015, 3)
    


    nf.addComment("Generated by mkQuad.py")
    nf.addComment("BiQuad")
    if verticalPolarization:
        nf.addComment("Vertical Polarization")
        nf.writeFile("validation_data/biquad_Vertical.nec")
    else:
        nf.addComment("Horizontal Polarization")
        nf.writeFile("validation_data/biquad_Horizontal.nec")


def mkQuad45(verticalPolarization = False):
    nf = necFile.necFile()
    nf.initManual(2450, 0, 2, 9)
    # Create driven element
    if verticalPolarization:
        nf.addWire([0,-feedpoint,-feedpoint], [0,feedpoint,feedpoint], 0.015, 3)

        nf.addWire([0,feedpoint,feedpoint], [0,0,dist45], 0.015, 3)
        nf.addWire([0,0,dist45], [0,-dist45,dist45], 0.015, 3)
        nf.addWire([0,-dist45,dist45], [0,-dist45,0], 0.015, 3)
        nf.addWire([0,-dist45,0], [0,-feedpoint,-feedpoint], 0.015, 3)

        nf.addWire([0,-feedpoint,-feedpoint], [0,0,-dist45], 0.015, 3)
        nf.addWire([0,0,-dist45], [0,dist45,-dist45], 0.015, 3)
        nf.addWire([0,dist45,-dist45], [0,dist45,0], 0.015, 3)
        nf.addWire([0,dist45,0], [0,feedpoint,feedpoint], 0.015, 3)
    else:
        nf.addWire([0,-feedpoint,-feedpoint], [0,feedpoint,feedpoint], 0.015, 3)

        nf.addWire([0,feedpoint,feedpoint], [0,0,-dist45], 0.015, 3)
        nf.addWire([0,0,-dist45], [0,-dist45,-dist45], 0.015, 3)
        nf.addWire([0,-dist45,-dist45], [0,-dist45,0], 0.015, 3)
        nf.addWire([0,-dist45,0], [0,-feedpoint,-feedpoint], 0.015, 3)

        nf.addWire([0,-feedpoint,-feedpoint], [0,0,dist45], 0.015, 3)
        nf.addWire([0,0,dist45], [0,dist45,dist45], 0.015, 3)
        nf.addWire([0,dist45,dist45], [0,dist45,0], 0.015, 3)
        nf.addWire([0,dist45,0], [0,feedpoint,feedpoint], 0.015, 3)
    


    nf.addComment("Generated by mkQuad.py")
    nf.addComment("BiQuad")
    if verticalPolarization:
        nf.addComment("Vertical Polarization")
        nf.writeFile("validation_data/biquad_+45.nec")
    else:
        nf.addComment("Horizontal Polarization")
        nf.writeFile("validation_data/biquad_-45.nec")

def mkDoubleQuad(verticalPolarization = False):
    nf = necFile.necFile()
    nf.initManual(2450, 0, 2, 17)
    # Create driven element

    if verticalPolarization:
        nf.addWire([0,-feedpoint,-feedpoint], [0,feedpoint,feedpoint], 0.015, 3)

        nf.addWire([0,feedpoint,feedpoint], [0,0,dist45], 0.015, 3)
        nf.addWire([0,0,dist45], [0,-dist45-feedpoint,dist45], 0.015, 3)

        nf.addWire([0,-dist45-feedpoint,dist45], [0,0,2*dist45], 0.015, 3)
        nf.addWire([0,0,2*dist45], [0,-dist45,2*dist45], 0.015, 3)
        nf.addWire([0,-dist45,2*dist45], [0,-2*dist45,0], 0.015, 3)
        nf.addWire([0,-2*dist45,0], [0,-dist45+feedpoint,dist45], 0.015, 3)

        nf.addWire([0,-dist45+feedpoint,dist45], [0,-dist45,0], 0.015, 3)
        nf.addWire([0,-dist45,0], [0,-feedpoint,-feedpoint], 0.015, 3)

        nf.addWire([0,-feedpoint,-feedpoint], [0,0,-dist45], 0.015, 3)
        nf.addWire([0,0,-dist45], [0,dist45+feedpoint,-dist45], 0.015, 3)

        nf.addWire([0,dist45+feedpoint,-dist45], [0,0,-2*dist45], 0.015, 3)
        nf.addWire([0,0,-2*dist45], [0,dist45,-2*dist45], 0.015, 3)
        nf.addWire([0,dist45,-2*dist45], [0,2*dist45,0], 0.015, 3)
        nf.addWire([0,2*dist45,0], [0,dist45-feedpoint,-dist45], 0.015, 3)

        nf.addWire([0,dist45,-dist45], [0,dist45,0], 0.015, 3)
        nf.addWire([0,dist45,0], [0,feedpoint,feedpoint], 0.015, 3)
    else:
        nf.addWire([0,-feedpoint,-feedpoint], [0,feedpoint,feedpoint], 0.015, 3)

        nf.addWire([0,feedpoint,feedpoint], [0,0,-dist45], 0.015, 3)
        nf.addWire([0,0,-dist45], [0,-dist45-feedpoint,-dist45], 0.015, 3)

        nf.addWire([0,-dist45-feedpoint,-dist45], [0,0,-2*dist45], 0.015, 3)
        nf.addWire([0,0,-2*dist45], [0,-dist45,-2*dist45], 0.015, 3)
        nf.addWire([0,-dist45,-2*dist45], [0,-2*dist45,0], 0.015, 3)
        nf.addWire([0,-2*dist45,0], [0,-dist45+feedpoint,-dist45], 0.015, 3)

        nf.addWire([0,-dist45+feedpoint,-dist45], [0,-dist45,0], 0.015, 3)
        nf.addWire([0,-dist45,0], [0,-feedpoint,-feedpoint], 0.015, 3)

        nf.addWire([0,-feedpoint,-feedpoint], [0,0,dist45], 0.015, 3)
        nf.addWire([0,0,dist45], [0,dist45+feedpoint,dist45], 0.015, 3)

        nf.addWire([0,dist45+feedpoint,dist45], [0,0,2*dist45], 0.015, 3)
        nf.addWire([0,0,2*dist45], [0,dist45,2*dist45], 0.015, 3)
        nf.addWire([0,dist45,2*dist45], [0,2*dist45,0], 0.015, 3)
        nf.addWire([0,2*dist45,0], [0,dist45-feedpoint,dist45], 0.015, 3)

        nf.addWire([0,dist45-feedpoint,dist45], [0,dist45,0], 0.015, 3)
        nf.addWire([0,dist45,0], [0,feedpoint,feedpoint], 0.015, 3)

    nf.addComment("Generated by mkQuad.py")
    nf.addComment("Double BiQuad")
    if verticalPolarization:
        nf.addComment("Vertical Polarization")
        nf.writeFile("validation_data/doublebiquad_Vertical.nec")
    else:
        nf.addComment("Horizontal Polarization")
        nf.writeFile("validation_data/doublebiquad_Horizontal.nec")



def mkDoubleQuad45(verticalPolarization = False):
    nf = necFile.necFile()
    nf.initManual(2450, 0, 2, 17)
    # Create driven element
    if verticalPolarization:
        nf.addWire([0,0,-feedpoint], [0,0,feedpoint], 0.015, 3)

        nf.addWire([0,0,feedpoint], [0,dist,dist], 0.015, 3)
        nf.addWire([0,dist,dist], [0,2*dist,feedpoint], 0.015, 3)

        nf.addWire([0,2*dist,feedpoint], [0,3*dist,dist], 0.015, 3)
        nf.addWire([0,3*dist,dist], [0,4*dist,0], 0.015, 3)
        nf.addWire([0,4*dist,0], [0,3*dist,-dist], 0.015, 3)
        nf.addWire([0,3*dist,-dist], [0,2*dist,-feedpoint], 0.015, 3)

        nf.addWire([0,2*dist,-feedpoint], [0,dist,-dist], 0.015, 3)
        nf.addWire([0,dist,-dist], [0,0,-feedpoint], 0.015, 3)

        nf.addWire([0,0,-feedpoint], [0,-dist,-dist], 0.015, 3)
        nf.addWire([0,-dist,-dist], [0,-2*dist,-feedpoint], 0.015, 3)

        nf.addWire([0,-2*dist,-feedpoint], [0,-3*dist,-dist], 0.015, 3)
        nf.addWire([0,-3*dist,-dist], [0,-4*dist,0], 0.015, 3)
        nf.addWire([0,-4*dist,0], [0,-3*dist,dist], 0.015, 3)
        nf.addWire([0,-3*dist,dist], [0,-2*dist,feedpoint], 0.015, 3)

        nf.addWire([0,-2*dist,feedpoint], [0,-dist,dist], 0.015, 3)
        nf.addWire([0,-dist,dist], [0,0,feedpoint], 0.015, 3)
    else:
        nf.addWire([0,-feedpoint,0], [0,feedpoint,0], 0.015, 3)

        nf.addWire([0,feedpoint,0], [0,dist,dist], 0.015, 3)
        nf.addWire([0,dist,dist], [0,feedpoint,2*dist], 0.015, 3)

        nf.addWire([0,feedpoint,2*dist], [0,dist,3*dist], 0.015, 3)
        nf.addWire([0,dist,3*dist], [0,0,4*dist], 0.015, 3)
        nf.addWire([0,0,4*dist], [0,-dist,3*dist], 0.015, 3)
        nf.addWire([0,-dist,3*dist], [0,-feedpoint,2*dist], 0.015, 3)

        nf.addWire([0,-feedpoint,2*dist], [0,-dist,dist], 0.015, 3)
        nf.addWire([0,-dist,dist], [0,-feedpoint,0], 0.015, 3)

        nf.addWire([0,-feedpoint,0], [0,-dist,-dist], 0.015, 3)
        nf.addWire([0,-dist,-dist], [0,-feedpoint,-2*dist], 0.015, 3)

        nf.addWire([0,-feedpoint,-2*dist], [0,-dist,-3*dist], 0.015, 3)
        nf.addWire([0,-dist,-3*dist], [0,0,-4*dist], 0.015, 3)
        nf.addWire([0,0,-4*dist], [0,dist,-3*dist], 0.015, 3)
        nf.addWire([0,dist,-3*dist], [0,feedpoint,-2*dist], 0.015, 3)

        nf.addWire([0,feedpoint,-2*dist], [0,dist,-dist], 0.015, 3)
        nf.addWire([0,dist,-dist], [0,feedpoint,0], 0.015, 3)
    


    nf.addComment("Generated by mkQuad.py")
    nf.addComment("Double BiQuad")
    if verticalPolarization:
        nf.addComment("Vertical Polarization")
        nf.writeFile("validation_data/doublebiquad_+45.nec")
    else:
        nf.addComment("Horizontal Polarization")
        nf.writeFile("validation_data/doublebiquad_-45.nec")


mkQuad(True)
mkQuad(False)
mkDoubleQuad(True)
mkDoubleQuad(False)

mkQuad45(True)
mkQuad45(False)
mkDoubleQuad45(True)
mkDoubleQuad45(False)
